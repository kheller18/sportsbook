{"ast":null,"code":"import _objectSpread from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveGames.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport API from '../utils/API';\nimport ActiveLines from './ActiveLines';\nimport Nav from './Nav';\nimport { SportsContext } from './ActiveSports';\nexport var GamesContext = /*#__PURE__*/React.createContext();\nimport RenderLines from './RenderLines';\n\nvar moment = require('moment-timezone');\n\nvar ActiveGames = function ActiveGames(props) {\n  _s();\n\n  var _useState = useState({\n    moneyline: null,\n    spread: null,\n    total: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      games = _useState2[0],\n      setGames = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lines = _useState6[0],\n      setLines = _useState6[1]; // const sports = useContext(SportsContext);\n\n\n  console.log(isLoading);\n  console.log(props);\n\n  var formatDate = function formatDate(seconds) {\n    var gmtDate = new Date(seconds * 1000);\n    var myTimeZone = 'America/Toronto';\n    var myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n    var formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    var formattedDate = formattedDateTime[0];\n    var formattedTime = formattedDateTime[1];\n    return [formattedDate, formattedTime];\n  };\n\n  var gameInfo = function gameInfo(gameData) {\n    var gameInfoArray = []; // function to push all lines data to an array\n\n    for (var i = 0; i < gameData.moneyline.length; i++) {\n      var formattedDate = formatDate(gameData.moneyline[i].commence_time);\n      var moneyLineData = gameData.moneyline[i];\n      var spreadData = gameData.spread[i];\n      var totalsData = gameData.total[i];\n      console.log('inside game data');\n\n      if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {} else {\n        gameInfoArray.push({\n          key: \"\".concat(gameData.moneyline[i].home_team, \"-\").concat(gameData.moneyline[i].commence_time),\n          league: gameData.moneyline[i].sport_nice,\n          awayTeam: gameData.moneyline[i].teams[0],\n          homeTeam: gameData.moneyline[i].teams[1],\n          awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n          homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n          awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n          homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n          awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n          homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n          overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n          overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n          underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n          lastUpdated: gameData.moneyline[i].sites[0].last_update,\n          siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n          gameDate: formattedDate[0],\n          gameTimeEst: formattedDate[1]\n        });\n      }\n    }\n\n    ;\n    return gameInfoArray;\n  };\n\n  useEffect(function () {\n    // console.log(props);\n    // gets moneyline data\n    var getMoneyLineData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return API.getLines(props.data.sport, 'moneyline');\n\n              case 2:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response.data.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getMoneyLineData() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // gets spread data\n\n\n    var getSpreadData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return API.getLines(props.data.sport, 'spread');\n\n              case 2:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response.data.data);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getSpreadData() {\n        return _ref2.apply(this, arguments);\n      };\n    }(); // gets totals data\n\n\n    var getTotalsData = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.getLines(props.data.sport, 'totals');\n\n              case 2:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response.data.data);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function getTotalsData() {\n        return _ref3.apply(this, arguments);\n      };\n    }(); // promise all for all functions to run\n\n\n    Promise.all([getMoneyLineData(), getSpreadData(), getTotalsData()]).then(function (values) {\n      setGames(_objectSpread(_objectSpread({}, games), {}, {\n        moneyline: values[0],\n        spread: values[1],\n        total: values[2]\n      }));\n      console.log('hey');\n      setLines(gameInfo(_objectSpread(_objectSpread({}, games), {}, {\n        moneyline: values[0],\n        spread: values[1],\n        total: values[2]\n      })));\n      console.log(values);\n      setIsLoading(false);\n    }).catch(function (err) {\n      console.log(err);\n      setIsLoading(false);\n    });\n  }, [props.data]); // props\n  // console.log(lines);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test2\",\n    children: /*#__PURE__*/_jsxDEV(RenderLines, {\n      data: lines,\n      passClickData: props.passClickData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ActiveGames, \"5yu6y+s2rTeDEBmuR3vVGlqvRDM=\");\n\n_c = ActiveGames;\nexport default ActiveGames;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveGames\");","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveGames.js"],"names":["React","useEffect","useState","useContext","API","ActiveLines","Nav","SportsContext","GamesContext","createContext","RenderLines","moment","require","ActiveGames","props","moneyline","spread","total","games","setGames","isLoading","setIsLoading","lines","setLines","console","log","formatDate","seconds","gmtDate","Date","myTimeZone","myDateTimeFormat","formattedDateTime","tz","format","split","formattedDate","formattedTime","gameInfo","gameData","gameInfoArray","i","length","commence_time","moneyLineData","spreadData","totalsData","sites","push","key","home_team","league","sport_nice","awayTeam","teams","homeTeam","awayMoneyLine","odds","h2h","homeMoneyLine","awaySpread","spreads","points","homeSpread","awaySpreadOdds","homeSpreadOdds","overUnder","totals","overOdds","underOdds","lastUpdated","last_update","siteRetrieved","site_key","gameDate","gameTimeEst","getMoneyLineData","getLines","data","sport","response","getSpreadData","getTotalsData","Promise","all","then","values","catch","err","passClickData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport API from '../utils/API';\nimport ActiveLines from './ActiveLines';\nimport Nav from './Nav';\nimport { SportsContext } from './ActiveSports';\nexport const GamesContext = React.createContext();\nimport RenderLines from './RenderLines';\nconst moment = require('moment-timezone');\n\n\nconst ActiveGames = (props) => {\n  const [games, setGames] = useState({ moneyline: null, spread: null, total: null });\n  const [isLoading, setIsLoading] = useState(true);\n  const [lines, setLines] = useState([])\n  // const sports = useContext(SportsContext);\n  console.log(isLoading)\n  console.log(props);\n\n  const formatDate = (seconds) => {\n    const gmtDate = new Date(seconds * 1000);\n    const myTimeZone = 'America/Toronto';\n    const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n    const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    const formattedDate = formattedDateTime[0];\n    const formattedTime = formattedDateTime[1];\n    return [formattedDate, formattedTime];\n  };\n\n  const gameInfo = (gameData) => {\n    const gameInfoArray = [];\n\n    // function to push all lines data to an array\n    for (let i = 0; i < gameData.moneyline.length; i++) {\n      const formattedDate = formatDate(gameData.moneyline[i].commence_time);\n      const moneyLineData = gameData.moneyline[i];\n      const spreadData = gameData.spread[i];\n      const totalsData = gameData.total[i];\n\n      console.log('inside game data')\n      if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {\n      } else {\n        gameInfoArray.push({\n          key: `${ gameData.moneyline[i].home_team }-${ gameData.moneyline[i].commence_time }`,\n          league: gameData.moneyline[i].sport_nice,\n          awayTeam: gameData.moneyline[i].teams[0],\n          homeTeam: gameData.moneyline[i].teams[1],\n          awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n          homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n          awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n          homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n          awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n          homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n          overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n          overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n          underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n          lastUpdated: gameData.moneyline[i].sites[0].last_update,\n          siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n          gameDate: formattedDate[0],\n          gameTimeEst: formattedDate[1]\n        });\n      }\n    };\n    return gameInfoArray;\n  };\n\n\n\n  useEffect(() => {\n    // console.log(props);\n    // gets moneyline data\n    const getMoneyLineData = async () => {\n      const response = await API.getLines(props.data.sport, 'moneyline');\n      return response.data.data;\n    };\n\n    // gets spread data\n    const getSpreadData = async () => {\n      const response = await API.getLines(props.data.sport, 'spread');\n      return response.data.data;\n    };\n\n    // gets totals data\n    const getTotalsData = async () => {\n      const response = await API.getLines(props.data.sport, 'totals');\n      return response.data.data;\n    };\n\n    // promise all for all functions to run\n    Promise.all([getMoneyLineData(), getSpreadData(), getTotalsData()])\n      .then(values => {\n        setGames({\n          ...games,\n          moneyline: values[0],\n          spread: values[1],\n          total: values[2],\n        })\n        console.log('hey')\n        setLines(gameInfo({\n          ...games,\n          moneyline: values[0],\n          spread: values[1],\n          total: values[2],\n        }))\n        console.log(values);\n        setIsLoading(false)\n      })\n      .catch(err => {\n        console.log(err);\n        setIsLoading(false)\n      });\n\n\n  }, [props.data]); // props\n\n  // console.log(lines);\n  return (\n    <div className='test2'>\n     \n        <RenderLines data={lines} passClickData={props.passClickData}/>\n   \n    </div>\n  );\n};\n\nexport default ActiveGames;\n"]},"metadata":{},"sourceType":"module"}