{"ast":null,"code":"import _toConsumableArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/RenderBetSlips.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import '../styles/BetSlip.css';\n\nimport API from '../utils/API';\nimport BetSlip from './BetSlip';\nimport Button from './Button';\nimport BetSlipConfirm from './BetSlipConfirm';\n\nvar RenderBetSlips = function RenderBetSlips(props) {\n  _s();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      toLose = _useState2[0],\n      setToLose = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toWin = _useState4[0],\n      setToWin = _useState4[1]; // const [totalToLose, setTotalToLose] = useState(0)\n\n\n  console.log(props);\n  console.log(props.data);\n  var newSlips = props.data;\n  var tempSlipList = []; // console.log(newSlips)\n\n  var slipSend = [];\n  var totalToWin = 0;\n  var totalToLose = 0.00; // const [newSlips, setNewSlips] = useState(props.data)\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      submitSlips = _useState6[0],\n      setSubmitSlips = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      slipList = _useState8[0],\n      setSlipList = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      submittedSlips = _useState10[0],\n      setSubmittedSlips = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isSubmitted = _useState12[0],\n      setIsSubmitted = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      IsLoading = _useState14[1]; // let send = true;\n\n\n  console.log(newSlips);\n\n  var handleDelete = function handleDelete(e) {\n    console.log(e);\n    console.log(e.target.id);\n    console.log(slipList);\n    var newList = slipList.filter(function (slip, id) {\n      return id != e.target.id;\n    });\n    console.log(newList);\n    setSlipList(newList);\n    newSlips = {};\n  };\n\n  var handleClear = function handleClear() {\n    newSlips = {};\n    setSlipList([]);\n  };\n\n  var updateSlip = function updateSlip(id, attributes) {\n    var index = slipList.findIndex(function (x) {\n      return x.id == id;\n    });\n    var updateList = slipList.slice();\n    console.log(index);\n\n    if (index == -1) {} else {// setSlipList([...])\n    }\n  };\n\n  var updatePage = function updatePage() {// setIsSubmitted(true)\n    // // props.onSubmit(slipList);\n    // console.log()\n    // props.passSlipState('submitted')\n    // props.passSlipData(slipSend)\n    // setSlipList([])\n    // setTimout((), 5000)\n  };\n\n  var handleChange = function handleChange(e, data) {\n    console.log(data);\n    console.log(e);\n    console.log(data.odds.toString()[0]);\n\n    switch (data.odds.toString()[0]) {\n      case '-':\n        console.log(data.odds);\n        var tempCalc = Math.abs(e.target.value * data.odds * .01);\n        console.log(tempCalc);\n        var finalCalc = tempCalc - e.target.value;\n        setToLose(e.target.value);\n        console.log(e.target.value);\n        data.toLose = e.target.value;\n        console.log((e.target.value - finalCalc).toFixed(2));\n        setToWin((e.target.value - finalCalc).toFixed(2));\n        data.toWin = (e.target.value - finalCalc).toFixed(2); // let totalToLose = 0;\n        // slipList.map(slip => {\n        //   totalToLose = parseFloat(totalToLose + slip.slipData.toLose);\n        //   console.log(totalToLose)\n        // })\n\n        console.log(data); // return data;\n\n        var index = slipList.findIndex(function (x) {\n          return console.log(x);\n        });\n\n        if (slipList.length === 1) {\n          slipList.map(function (slip) {\n            console.log(slip);\n          });\n        } else {}\n\n        var slice = slipList.slice(0, parseInt(e.target.id));\n        console.log(slice);\n        console.log(slipList); // console.log('slice', slice)\n\n        break;\n\n      default:\n        setToLose(e.target.value);\n        data.toLose = e.target.value;\n        console.log((e.target.value * data.odds * .01).toFixed(2));\n        setToWin((e.target.value * data.odds * .01).toFixed(2));\n        data.toWin = (e.target.value * data.odds * .01).toFixed(2);\n        console.log(slipList);\n        break;\n    }\n\n    ;\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    event.persist();\n    console.log(slipList);\n    var userData = JSON.parse(localStorage.getItem('user')); // function to post slip data based on slip type\n\n    var slipData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var send;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                send = true;\n                slipList.map(function (slip) {\n                  console.log(slip);\n                  console.log(slip.slipData.toLose);\n\n                  if (slip.slipData.toLose === '' || slip.slipData.toLose < 5) {\n                    console.log('nope');\n                    send = false;\n                  } else {\n                    slipSend.push({\n                      userId: userData._id,\n                      gameKey: slip.data.key,\n                      betType: slip.slipData.type,\n                      team: slip.slipData.team,\n                      line: slip.slipData.line,\n                      odds: slip.slipData.odds,\n                      toLose: slip.slipData.toLose,\n                      toWin: slip.slipData.toWin,\n                      status: slip.slipData.status,\n                      outcome: slip.slipData.outcome,\n                      payout: slip.slipData.payout\n                    });\n                  }\n                }); // if (send === true) {\n                //   console.log(slipSend)\n                //   Promise.all(slipSend.map(slip => API.submitBetSlip(slip))\n                // }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function slipData() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // if (send === true) {\n    //   console.log(slipSend)\n    //   await API.submitBetSlip(slipSend)\n    //     .then((res) => {\n    //       console.log(res);\n    //       if (res.status === 200) {\n    //         console.log('200')\n    //         console.log(res.data)\n    //         // setIsSubmitted(true);\n    //         // updatePage();\n    //         setIsSubmitted(true)\n    //         // props.onSubmit(slipList);\n    //         tempSlipList = slipList;\n    //         // props.data=[];\n    //         setSubmittedSlips(slipList)\n    //         setTimeout(() => {\n    //           setSlipList([])\n    //           setSubmittedSlips([])\n    //         }, 4000);\n    //         console.log(slipList)\n    //         // props.passSlipData(tempSlipList)\n    //         // props.passSlipState('submitted')\n    //         // return (\n    //         //   <div>\n    //         //     <BetSlipConfirm data={res.data} />\n    //         //   </div>\n    //         // )\n    //       }\n    //     })\n    // if (send === true) {\n    //   console.log(slipSend)\n    //   Promise.all(slipSend.map(slip => API.submitBetSlip(slip))\n    // }\n    // await API.submitBetSlip(slipSend)\n    //   .then((res) => {\n    //     console.log(res);\n    //     if (res.status === 200) {\n    //       console.log('200')\n    //       console.log(res.data)\n    //       setIsSubmitted(true)\n    //       tempSlipList = slipList;\n    //       setSubmittedSlips(slipList)\n    //       setTimeout(() => {\n    //         setSlipList([])\n    //         setSubmittedSlips([])\n    //       }, 4000);\n    //       console.log(slipList)\n    //       // props.passSlipData(tempSlipList)\n    //       // props.passSlipState('submitted')\n    //       // return (\n    //       //   <div>\n    //       //     <BetSlipConfirm data={res.data} />\n    //       //   </div>\n    //       // )\n    //     }\n    //   })\n    // .catch(err => {\n    //   console.log(err);\n    // });\n    // }\n\n\n    slipData().then(function (data) {\n      console.log(data);\n    });\n  };\n\n  useEffect(function () {\n    // setSlips(slips);\n    // const slips = props.data;\n    // const [slipList, setSlipList] = useState();\n    // console.log('mounted')\n    console.log(newSlips.length);\n\n    if (newSlips === undefined || newSlips === {} || newSlips === null || newSlips === [] || newSlips.length === 0) {\n      console.log('inside the correct');\n    } else {\n      setSlipList(function (slipList) {\n        return [].concat(_toConsumableArray(slipList), [newSlips]);\n      });\n      console.log(newSlips);\n      console.log(\"added\"); // console.log(slipList)\n    } // console.log(slipList)\n    // setSlips(slips)\n\n  }, [props.data]);\n  console.log(slipList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slip\",\n    children: [submittedSlips.length, slipList.length === 0 && submittedSlips.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-slip-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"empty-slip-image\",\n          className: \"fa fa-shopping-cart\",\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, _this) : '', submittedSlips.length > 0 ? /*#__PURE__*/_jsxDEV(BetSlipConfirm, {\n      data: submittedSlips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, _this) : '', slipList !== undefined && slipList.length !== 0 && submittedSlips.length === 0 ? // (slipList === undefined || slipList.length === 0) ? '' :\n    slipList.map(function (slip, i) {\n      // if (slip.slipData.toLose <= 0) {\n      //   totalToLose = parseFloat(totalToLose)\n      // } else {\n      //   totalToLose += parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n      // }\n      totalToLose = parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(BetSlip, {\n          data: slip,\n          id: i,\n          onRemove: handleDelete,\n          onSubmit: handleSubmit,\n          onChange: handleChange,\n          onUpdate: updateSlip,\n          toWin: toWin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }, _this)\n      }, slip.data.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 15\n      }, _this);\n    }) : '', slipList === undefined || slipList.length === 0 || slipList === [] || submittedSlips.length > 0 ? '' : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slip-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClear,\n        id: props.id,\n        type: \"button\",\n        className: \"slip-button\",\n        children: \"CANCEL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        className: \"slip-button\",\n        id: \"submit-slip\",\n        children: \"PLACE BET(S)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RenderBetSlips, \"o5NND+ZWNQhZ2CmMiNyyZfZMlpA=\");\n\n_c = RenderBetSlips;\nexport default RenderBetSlips; // take the value from the slip, set it to the array here, then re render the whole page using useffect dependency\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderBetSlips\");","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/RenderBetSlips.js"],"names":["React","useEffect","useState","API","BetSlip","Button","BetSlipConfirm","RenderBetSlips","props","toLose","setToLose","toWin","setToWin","console","log","data","newSlips","tempSlipList","slipSend","totalToWin","totalToLose","submitSlips","setSubmitSlips","slipList","setSlipList","submittedSlips","setSubmittedSlips","isSubmitted","setIsSubmitted","loading","IsLoading","handleDelete","e","target","id","newList","filter","slip","handleClear","updateSlip","attributes","index","findIndex","x","updateList","slice","updatePage","handleChange","odds","toString","tempCalc","Math","abs","value","finalCalc","toFixed","length","map","parseInt","handleSubmit","event","preventDefault","persist","userData","JSON","parse","localStorage","getItem","slipData","send","push","userId","_id","gameKey","key","betType","type","team","line","status","outcome","payout","then","undefined","i","parseFloat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import '../styles/BetSlip.css';\nimport API from '../utils/API';\nimport BetSlip from './BetSlip';\nimport Button from './Button';\nimport BetSlipConfirm from './BetSlipConfirm'\n\nconst RenderBetSlips = (props) => {\n  const [toLose, setToLose] = useState(0);\n  const [toWin, setToWin] = useState();\n  // const [totalToLose, setTotalToLose] = useState(0)\n  console.log(props)\n  console.log(props.data)\n  let newSlips = props.data;\n  let tempSlipList = [];\n  // console.log(newSlips)\n  const slipSend = [];\n  let totalToWin = 0;\n  let totalToLose = 0.00;\n  // const [newSlips, setNewSlips] = useState(props.data)\n  const [submitSlips, setSubmitSlips] = useState([]);\n  const [slipList, setSlipList] = useState([]);\n  const [submittedSlips, setSubmittedSlips] = useState([])\n  const [isSubmitted, setIsSubmitted] = useState(false)\n  const [loading, IsLoading] = useState(true);\n  // let send = true;\n  console.log(newSlips)\n  const handleDelete = (e) => {\n    console.log(e);\n    console.log(e.target.id)\n    console.log(slipList)\n    let newList = slipList.filter((slip, id) => id != e.target.id);\n    console.log(newList)\n    setSlipList(newList);\n    newSlips = {};\n  }\n\n  const handleClear = () => {\n    newSlips = {};\n    setSlipList([]);\n\n  }\n\n  const updateSlip = (id, attributes) => {\n    let index = slipList.findIndex(x => x.id == id);\n    let updateList = slipList.slice()\n    console.log(index);\n    if (index == -1) {\n\n    } else {\n      // setSlipList([...])\n    }\n  }\n\n  const updatePage = () => {\n    // setIsSubmitted(true)\n    // // props.onSubmit(slipList);\n    // console.log()\n    // props.passSlipState('submitted')\n    // props.passSlipData(slipSend)\n    // setSlipList([])\n\n    // setTimout((), 5000)\n  }\n\n  const handleChange = (e, data) => {\n    console.log(data);\n    console.log(e);\n    console.log(data.odds.toString()[0]);\n    switch (data.odds.toString()[0]) {\n      case '-':\n        console.log(data.odds)\n        let tempCalc = Math.abs(e.target.value * data.odds * .01);\n        console.log(tempCalc)\n        let finalCalc = tempCalc - e.target.value;\n        setToLose(e.target.value)\n        console.log(e.target.value)\n        data.toLose = e.target.value;\n        console.log((e.target.value - finalCalc).toFixed(2))\n        setToWin((e.target.value - finalCalc).toFixed(2));\n        data.toWin=(e.target.value - finalCalc).toFixed(2);\n        // let totalToLose = 0;\n        // slipList.map(slip => {\n        //   totalToLose = parseFloat(totalToLose + slip.slipData.toLose);\n        //   console.log(totalToLose)\n        // })\n        console.log(data);\n\n        // return data;\n        let index = slipList.findIndex(x => console.log(x));\n        if (slipList.length === 1) {\n          slipList.map(slip => {\n            console.log(slip)\n          })\n        } else {\n\n        }\n        let slice = slipList.slice(0, parseInt(e.target.id));\n        console.log(slice);\n        console.log(slipList)\n        // console.log('slice', slice)\n        break;\n      default:\n        setToLose(e.target.value);\n        data.toLose = e.target.value;\n        console.log((e.target.value * data.odds * .01).toFixed(2))\n        setToWin((e.target.value * data.odds * .01).toFixed(2));\n        data.toWin = (e.target.value * data.odds * .01).toFixed(2)\n        console.log(slipList)\n        break;\n    };\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    event.persist();\n    console.log(slipList);\n    const userData = JSON.parse(localStorage.getItem('user'));\n\n    // function to post slip data based on slip type\n    const slipData = async () => {\n      let send = true;\n\n      slipList.map(slip => {\n        console.log(slip)\n        console.log(slip.slipData.toLose)\n        if (slip.slipData.toLose === '' || slip.slipData.toLose < 5) {\n\n          console.log('nope')\n          send = false;\n\n        } else {\n          slipSend.push({\n            userId: userData._id,\n            gameKey: slip.data.key,\n            betType: slip.slipData.type,\n            team: slip.slipData.team,\n            line: slip.slipData.line,\n            odds: slip.slipData.odds,\n            toLose: slip.slipData.toLose,\n            toWin: slip.slipData.toWin,\n            status: slip.slipData.status,\n            outcome: slip.slipData.outcome,\n            payout: slip.slipData.payout\n          })\n        }\n      })\n\n      // if (send === true) {\n      //   console.log(slipSend)\n\n      //   Promise.all(slipSend.map(slip => API.submitBetSlip(slip))\n\n      // }\n    }\n      // if (send === true) {\n      //   console.log(slipSend)\n      //   await API.submitBetSlip(slipSend)\n      //     .then((res) => {\n      //       console.log(res);\n      //       if (res.status === 200) {\n      //         console.log('200')\n      //         console.log(res.data)\n      //         // setIsSubmitted(true);\n      //         // updatePage();\n      //         setIsSubmitted(true)\n      //         // props.onSubmit(slipList);\n      //         tempSlipList = slipList;\n      //         // props.data=[];\n      //         setSubmittedSlips(slipList)\n      //         setTimeout(() => {\n      //           setSlipList([])\n      //           setSubmittedSlips([])\n      //         }, 4000);\n      //         console.log(slipList)\n      //         // props.passSlipData(tempSlipList)\n      //         // props.passSlipState('submitted')\n      //         // return (\n      //         //   <div>\n      //         //     <BetSlipConfirm data={res.data} />\n      //         //   </div>\n      //         // )\n      //       }\n      //     })\n      // if (send === true) {\n      //   console.log(slipSend)\n\n      //   Promise.all(slipSend.map(slip => API.submitBetSlip(slip))\n      // }\n        // await API.submitBetSlip(slipSend)\n        //   .then((res) => {\n        //     console.log(res);\n        //     if (res.status === 200) {\n        //       console.log('200')\n        //       console.log(res.data)\n        //       setIsSubmitted(true)\n        //       tempSlipList = slipList;\n        //       setSubmittedSlips(slipList)\n        //       setTimeout(() => {\n        //         setSlipList([])\n        //         setSubmittedSlips([])\n        //       }, 4000);\n        //       console.log(slipList)\n        //       // props.passSlipData(tempSlipList)\n        //       // props.passSlipState('submitted')\n        //       // return (\n        //       //   <div>\n        //       //     <BetSlipConfirm data={res.data} />\n        //       //   </div>\n        //       // )\n        //     }\n        //   })\n      \n        // .catch(err => {\n        //   console.log(err);\n        // });\n        // }\n\n\n\n    \n\n    slipData().then(data => {\n      console.log(data)\n    });\n  };\n\n  useEffect(() => {\n    // setSlips(slips);\n    // const slips = props.data;\n    // const [slipList, setSlipList] = useState();\n    // console.log('mounted')\n    console.log(newSlips.length)\n    if (newSlips === undefined || newSlips === {} || newSlips === null || newSlips===[] || newSlips.length === 0) {\n      console.log('inside the correct')\n    } else {\n      setSlipList(slipList => [...slipList, newSlips])\n      console.log(newSlips)\n      console.log(\"added\")\n      \n      \n      // console.log(slipList)\n    }\n    // console.log(slipList)\n    // setSlips(slips)\n\n  }, [props.data]);\n\n  console.log(slipList)\n  return (\n    <div className='slip'>\n      \n      {submittedSlips.length}\n      {/* {(isSubmitted !== true && slipList !== undefined && slipList.length !== 0) ? */}\n      {slipList.length === 0 && submittedSlips.length === 0 ? \n        <div className='empty-slip-container'>\n          <span><i id='empty-slip-image' className='fa fa-shopping-cart' aria-hidden=\"true\"></i></span>\n        </div>\n      :\n      ''}\n\n      {submittedSlips.length > 0 ? \n        <BetSlipConfirm data={submittedSlips} />\n      :\n      ''\n      }\n\n      {(slipList !== undefined && slipList.length !== 0 && submittedSlips.length === 0) ?\n        // (slipList === undefined || slipList.length === 0) ? '' :\n          slipList.map((slip, i) => {\n            // if (slip.slipData.toLose <= 0) {\n            //   totalToLose = parseFloat(totalToLose)\n            // } else {\n            //   totalToLose += parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n            // }\n            totalToLose = parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n            return (\n              <div key={slip.data.key}>\n                <BetSlip data={slip} id={i} onRemove={handleDelete} onSubmit={handleSubmit} onChange={handleChange} onUpdate={updateSlip} toWin={toWin}/>\n              </div>\n            )\n          })\n        :\n        ''\n      }\n\n      {/* {(slipList === undefined || slipList.length === 0 || slipList === []) ? '' :\n          <div className='slip-total-money'>\n            {totalToLose}\n          </div>\n      } */}\n\n      {(slipList === undefined || slipList.length === 0 || slipList === []) || submittedSlips.length > 0 ? '' :\n        <div className='slip-buttons'>\n          <Button\n            onClick={handleClear}\n            id={props.id}\n            type='button'\n            className='slip-button'\n          >\n            CANCEL\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            className='slip-button'\n            id='submit-slip'\n          >\n            PLACE BET(S)\n          </Button>\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default RenderBetSlips;\n\n// take the value from the slip, set it to the array here, then re render the whole page using useffect dependency"]},"metadata":{},"sourceType":"module"}