{"ast":null,"code":"import _objectSpread from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveGames.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport API from '../utils/API';\nimport ActiveLines from './ActiveLines';\nimport Nav from './Nav';\nimport { SportsContext } from './ActiveSports';\nexport var GamesContext = /*#__PURE__*/React.createContext();\nimport RenderLines from './RenderLines';\n\nvar moment = require('moment-timezone');\n\nvar ActiveGames = function ActiveGames(props) {\n  _s();\n\n  var _useState = useState({\n    moneyline: null,\n    spread: null,\n    total: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      games = _useState2[0],\n      setGames = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lines = _useState4[0],\n      setLines = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1]; // const sports = useContext(SportsContext);\n\n\n  console.log(isLoading);\n  console.log(props);\n  console.log(props.data.sport); // const formatDate = (seconds) => {\n  //   const gmtDate = new Date(seconds * 1000);\n  //   const myTimeZone = 'America/Toronto';\n  //   const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n  //   const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n  //   const formattedDate = formattedDateTime[0];\n  //   const formattedTime = formattedDateTime[1];\n  //   return [formattedDate, formattedTime];\n  // };\n  // const gameInfo = (gameData) => {\n  //   const gameInfoArray = [];\n  //   console.log('inside game info')\n  //   const formatDate = (seconds) => {\n  //     const gmtDate = new Date(seconds * 1000);\n  //     const myTimeZone = 'America/Toronto';\n  //     const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n  //     const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n  //     const formattedDate = formattedDateTime[0];\n  //     const formattedTime = formattedDateTime[1];\n  //     return [formattedDate, formattedTime];\n  //   };\n  //   // function to push all lines data to an array\n  //   for (let i = 0; i < gameData.moneyline.length; i++) {\n  //     const formattedDate = formatDate(gameData.moneyline[i].commence_time);\n  //     const moneyLineData = gameData.moneyline[i];\n  //     const spreadData = gameData.spread[i];\n  //     const totalsData = gameData.total[i];\n  //     console.log('inside game data')\n  //     if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {\n  //     } else {\n  //       gameInfoArray.push({\n  //         key: `${ gameData.moneyline[i].home_team }-${ gameData.moneyline[i].commence_time }`,\n  //         league: gameData.moneyline[i].sport_nice,\n  //         awayTeam: gameData.moneyline[i].teams[0],\n  //         homeTeam: gameData.moneyline[i].teams[1],\n  //         awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n  //         homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n  //         awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n  //         homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n  //         awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n  //         homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n  //         overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n  //         overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n  //         underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n  //         lastUpdated: gameData.moneyline[i].sites[0].last_update,\n  //         siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n  //         gameDate: formattedDate[0],\n  //         gameTimeEst: formattedDate[1]\n  //       });\n  //     }\n  //   };\n  //   console.log(gameInfoArray)\n  //   return gameInfoArray;\n  // };\n\n  useEffect(function () {\n    // console.log(props);\n    // gets moneyline data\n    console.log('useeffect');\n\n    var getAllData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var getMoneyLineData, getSpreadData, getTotalsData, gameInfo, final;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                getMoneyLineData = /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var response;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            console.log('ue1');\n                            _context.next = 3;\n                            return API.getLines(props.data.sport, 'moneyline');\n\n                          case 3:\n                            response = _context.sent;\n                            return _context.abrupt(\"return\", response.data.data);\n\n                          case 5:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function getMoneyLineData() {\n                    return _ref2.apply(this, arguments);\n                  };\n                }(); // gets spread data\n\n\n                getSpreadData = /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var response;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            console.log('ue2');\n                            _context2.next = 3;\n                            return API.getLines(props.data.sport, 'spread');\n\n                          case 3:\n                            response = _context2.sent;\n                            return _context2.abrupt(\"return\", response.data.data);\n\n                          case 5:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function getSpreadData() {\n                    return _ref3.apply(this, arguments);\n                  };\n                }(); // gets totals data\n\n\n                getTotalsData = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var response;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            console.log('ue3');\n                            _context3.next = 3;\n                            return API.getLines(props.data.sport, 'totals');\n\n                          case 3:\n                            response = _context3.sent;\n                            return _context3.abrupt(\"return\", response.data.data);\n\n                          case 5:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function getTotalsData() {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n\n                gameInfo = function gameInfo(gameData) {\n                  var gameInfoArray = [];\n                  console.log('inside game info');\n\n                  var formatDate = function formatDate(seconds) {\n                    var gmtDate = new Date(seconds * 1000);\n                    var myTimeZone = 'America/Toronto';\n                    var myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n                    var formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n                    var formattedDate = formattedDateTime[0];\n                    var formattedTime = formattedDateTime[1];\n                    return [formattedDate, formattedTime];\n                  }; // function to push all lines data to an array\n\n\n                  for (var i = 0; i < gameData.moneyline.length; i++) {\n                    var formattedDate = formatDate(gameData.moneyline[i].commence_time);\n                    var moneyLineData = gameData.moneyline[i];\n                    var spreadData = gameData.spread[i];\n                    var totalsData = gameData.total[i];\n                    console.log('inside game data');\n\n                    if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {} else {\n                      gameInfoArray.push({\n                        key: \"\".concat(gameData.moneyline[i].home_team, \"-\").concat(gameData.moneyline[i].commence_time),\n                        league: gameData.moneyline[i].sport_nice,\n                        awayTeam: gameData.moneyline[i].teams[0],\n                        homeTeam: gameData.moneyline[i].teams[1],\n                        awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n                        homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n                        awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n                        homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n                        awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n                        homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n                        overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n                        overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n                        underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n                        lastUpdated: gameData.moneyline[i].sites[0].last_update,\n                        siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n                        gameDate: formattedDate[0],\n                        gameTimeEst: formattedDate[1]\n                      });\n                    }\n                  }\n\n                  ;\n                  console.log(gameInfoArray);\n                  return gameInfoArray;\n                };\n\n                console.log('oo'); // promise all for all functions to run\n                // const example = getMoneyLineData();\n                // console.log(example)\n\n                _context4.next = 7;\n                return Promise.all([getMoneyLineData(), getSpreadData(), getTotalsData()]).then(function (values) {\n                  console.log('ue4');\n                  console.log(values); // setGames({\n                  //   ...games,\n                  //   moneyline: values[0],\n                  //   spread: values[1],\n                  //   total: values[2],\n                  // })\n                  // setLines(values[0])\n\n                  console.log('hey');\n                  var examp = gameInfo(_objectSpread(_objectSpread({}, games), {}, {\n                    moneyline: values[0],\n                    spread: values[1],\n                    total: values[2]\n                  }));\n                  console.log(examp); // setLines(gameInfo({\n                  //   ...games,\n                  //   moneyline: values[0],\n                  //   spread: values[1],\n                  //   total: values[2],\n                  // }))\n                  // setIsLoading(false)\n\n                  console.log(lines); // setLines(examp)\n\n                  console.log(lines); // setLines(() => )\n\n                  console.log('hey there');\n                  setLines(examp);\n                }).catch(function (err) {\n                  console.log(err);\n                  setIsLoading(false);\n                });\n\n              case 7:\n                final = _context4.sent;\n                console.log('outside'); // console.log(examp)\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function getAllData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getAllData(); // .then((res) => {\n    //   console.log(res)\n    //   console.log('.then')\n    // })\n  }, [props.data.sport]); // props\n  // console.log(lines);\n\n  console.log('botom');\n  console.log(lines);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test2\",\n    children: lines.length > 0 ? '' : lines.length // <RenderLines data={lines} passClickData={props.passClickData}/>\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ActiveGames, \"5UaHjXpQydcCVmmdvtB5VEYCCXY=\");\n\n_c = ActiveGames;\nexport default ActiveGames;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveGames\");","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveGames.js"],"names":["React","useEffect","useState","useContext","API","ActiveLines","Nav","SportsContext","GamesContext","createContext","RenderLines","moment","require","ActiveGames","props","moneyline","spread","total","games","setGames","lines","setLines","isLoading","setIsLoading","console","log","data","sport","getAllData","getMoneyLineData","getLines","response","getSpreadData","getTotalsData","gameInfo","gameData","gameInfoArray","formatDate","seconds","gmtDate","Date","myTimeZone","myDateTimeFormat","formattedDateTime","tz","format","split","formattedDate","formattedTime","i","length","commence_time","moneyLineData","spreadData","totalsData","sites","push","key","home_team","league","sport_nice","awayTeam","teams","homeTeam","awayMoneyLine","odds","h2h","homeMoneyLine","awaySpread","spreads","points","homeSpread","awaySpreadOdds","homeSpreadOdds","overUnder","totals","overOdds","underOdds","lastUpdated","last_update","siteRetrieved","site_key","gameDate","gameTimeEst","Promise","all","then","values","examp","catch","err","final"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport API from '../utils/API';\nimport ActiveLines from './ActiveLines';\nimport Nav from './Nav';\nimport { SportsContext } from './ActiveSports';\nexport const GamesContext = React.createContext();\nimport RenderLines from './RenderLines';\nconst moment = require('moment-timezone');\n\n\nconst ActiveGames = (props) => {\n  const [games, setGames] = useState({ moneyline: null, spread: null, total: null });\n  const [lines, setLines] = useState([])\n  const [isLoading, setIsLoading] = useState(true);\n\n  // const sports = useContext(SportsContext);\n  console.log(isLoading)\n  console.log(props);\n  console.log(props.data.sport)\n\n  // const formatDate = (seconds) => {\n  //   const gmtDate = new Date(seconds * 1000);\n  //   const myTimeZone = 'America/Toronto';\n  //   const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n  //   const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n  //   const formattedDate = formattedDateTime[0];\n  //   const formattedTime = formattedDateTime[1];\n  //   return [formattedDate, formattedTime];\n  // };\n\n  // const gameInfo = (gameData) => {\n  //   const gameInfoArray = [];\n  //   console.log('inside game info')\n\n  //   const formatDate = (seconds) => {\n  //     const gmtDate = new Date(seconds * 1000);\n  //     const myTimeZone = 'America/Toronto';\n  //     const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n  //     const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n  //     const formattedDate = formattedDateTime[0];\n  //     const formattedTime = formattedDateTime[1];\n  //     return [formattedDate, formattedTime];\n  //   };\n  \n  //   // function to push all lines data to an array\n  //   for (let i = 0; i < gameData.moneyline.length; i++) {\n  //     const formattedDate = formatDate(gameData.moneyline[i].commence_time);\n  //     const moneyLineData = gameData.moneyline[i];\n  //     const spreadData = gameData.spread[i];\n  //     const totalsData = gameData.total[i];\n\n  //     console.log('inside game data')\n  //     if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {\n  //     } else {\n  //       gameInfoArray.push({\n  //         key: `${ gameData.moneyline[i].home_team }-${ gameData.moneyline[i].commence_time }`,\n  //         league: gameData.moneyline[i].sport_nice,\n  //         awayTeam: gameData.moneyline[i].teams[0],\n  //         homeTeam: gameData.moneyline[i].teams[1],\n  //         awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n  //         homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n  //         awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n  //         homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n  //         awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n  //         homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n  //         overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n  //         overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n  //         underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n  //         lastUpdated: gameData.moneyline[i].sites[0].last_update,\n  //         siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n  //         gameDate: formattedDate[0],\n  //         gameTimeEst: formattedDate[1]\n  //       });\n  //     }\n  //   };\n  //   console.log(gameInfoArray)\n  //   return gameInfoArray;\n  // };\n\n\n\n  useEffect(() => {\n    // console.log(props);\n    // gets moneyline data\n    console.log('useeffect')\n    const getAllData = async () => {\n\n      const getMoneyLineData = async () => {\n        console.log('ue1')\n        const response = await API.getLines(props.data.sport, 'moneyline');\n        return response.data.data;\n      };\n      \n      // gets spread data\n      const getSpreadData = async () => {\n        console.log('ue2')\n        const response = await API.getLines(props.data.sport, 'spread');\n        return response.data.data;\n      };\n  \n      // gets totals data\n      const getTotalsData = async () => {\n        console.log('ue3')\n        const response = await API.getLines(props.data.sport, 'totals');\n        return response.data.data;\n      };\n\n      const gameInfo = (gameData) => {\n        const gameInfoArray = [];\n        console.log('inside game info')\n    \n        const formatDate = (seconds) => {\n          const gmtDate = new Date(seconds * 1000);\n          const myTimeZone = 'America/Toronto';\n          const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n          const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n          const formattedDate = formattedDateTime[0];\n          const formattedTime = formattedDateTime[1];\n          return [formattedDate, formattedTime];\n        };\n      \n        // function to push all lines data to an array\n        for (let i = 0; i < gameData.moneyline.length; i++) {\n          const formattedDate = formatDate(gameData.moneyline[i].commence_time);\n          const moneyLineData = gameData.moneyline[i];\n          const spreadData = gameData.spread[i];\n          const totalsData = gameData.total[i];\n    \n          console.log('inside game data')\n          if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {\n          } else {\n            gameInfoArray.push({\n              key: `${ gameData.moneyline[i].home_team }-${ gameData.moneyline[i].commence_time }`,\n              league: gameData.moneyline[i].sport_nice,\n              awayTeam: gameData.moneyline[i].teams[0],\n              homeTeam: gameData.moneyline[i].teams[1],\n              awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n              homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n              awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n              homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n              awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n              homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n              overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n              overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n              underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n              lastUpdated: gameData.moneyline[i].sites[0].last_update,\n              siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n              gameDate: formattedDate[0],\n              gameTimeEst: formattedDate[1]\n            });\n          }\n        };\n        console.log(gameInfoArray)\n        return gameInfoArray;\n      };\n    \n  \n      console.log('oo')\n      // promise all for all functions to run\n      // const example = getMoneyLineData();\n      // console.log(example)\n      let final = await Promise.all([getMoneyLineData(), getSpreadData(), getTotalsData()])\n      \n        .then(values => {\n          console.log('ue4')\n          console.log(values);\n          // setGames({\n          //   ...games,\n          //   moneyline: values[0],\n          //   spread: values[1],\n          //   total: values[2],\n          // })\n          // setLines(values[0])\n          console.log('hey')\n          const examp = gameInfo({\n            ...games,\n            moneyline: values[0],\n            spread: values[1],\n            total: values[2],\n          })\n          console.log(examp)\n          // setLines(gameInfo({\n          //   ...games,\n          //   moneyline: values[0],\n          //   spread: values[1],\n          //   total: values[2],\n          // }))\n          // setIsLoading(false)\n          console.log(lines)\n          // setLines(examp)\n          console.log(lines)\n          // setLines(() => )\n          console.log('hey there')\n          setLines(examp)\n        })\n        .catch(err => {\n          console.log(err);\n          setIsLoading(false)\n        });\n        console.log('outside')\n        // console.log(examp)\n    \n\n    } \n\n    getAllData()\n      // .then((res) => {\n      //   console.log(res)\n      //   console.log('.then')\n      // })\n\n\n  }, [props.data.sport]); // props\n\n  // console.log(lines);\n  console.log('botom')\n  console.log(lines)\n  return (\n    <div className='test2'>\n     {(lines.length > 0) ? '' :\n        lines.length\n        // <RenderLines data={lines} passClickData={props.passClickData}/>\n  }\n    </div>\n  );\n};\n\nexport default ActiveGames;\n"]},"metadata":{},"sourceType":"module"}