{"ast":null,"code":"import _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveLines.js\";\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { GamesContext } from './ActiveGames';\nimport RenderLines from './RenderLines';\nexport var ActiveLinesContext = React.createContext();\n\nvar moment = require('moment-timezone');\n\nvar ActiveLines = function ActiveLines() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      lines = _useState2[0],\n      setLines = _useState2[1];\n\n  var games = useContext(GamesContext);\n  useEffect(function () {\n    setLines(gameInfo(games));\n    console.log(games);\n  }, [games]);\n\n  var formatDate = function formatDate(seconds) {\n    // const formattedDate = new Date(seconds * 1000).toISOString().substr();\n    var gmtDate = new Date(seconds * 1000);\n    var myTimeZone = 'America/Toronto';\n    var myDateTimeFormat = 'MMMM Do YYYY h:mm a z';\n    var formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    var formattedDate = formattedDateTime[0];\n    var formattedTime = formattedDateTime[1]; // const newDate = new Date(formattedDate);\n\n    console.log(formattedDate);\n    return [formattedDate, formattedTime];\n  };\n\n  var gameInfo = function gameInfo(gameData) {\n    var gameInfoArray = [];\n    var i;\n    console.log(gameData);\n\n    for (i = 0; i < gameData.length; i++) {\n      var formattedDate = formatDate(gameData[i].commence_time);\n      gameInfoArray.push({\n        key: \"\".concat(gameData[i].home_team, \"-\").concat(gameData[i].commence_time),\n        league: gameData[i].sport_nice,\n        awayTeam: gameData[i].teams[0],\n        homeTeam: gameData[i].teams[1],\n        awayMoneyLine: gameData[i].sites[0].odds.h2h[0],\n        homeMoneyLine: gameData[i].sites[0].odds.h2h[1],\n        lastUpdated: gameData[i].sites[0].last_update,\n        siteRetrieved: gameData[i].sites[0].site_key,\n        // gameTimeGmt: gameData[i].commence_time\n        gameDate: formattedDate[0],\n        gameTimeEst: formattedDate[1]\n      });\n    }\n\n    ;\n    console.log(gameInfoArray);\n    return gameInfoArray;\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   {lines.map(line => <div key={line.key}>{line.awayTeam} ({line.awayMoneyLine.toString().charAt(0)==='-' ? line.awayMoneyLine : `+${ line.awayMoneyLine }`}) VS. {line.homeTeam} ({line.homeMoneyLine.toString().charAt(0)==='-' ? line.homeMoneyLine : `+${ line.homeMoneyLine }`})</div>)}\n    // </div>\n    React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(ActiveLinesContext.Provider, {\n      value: lines,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(RenderLines, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    })))\n  );\n};\n\nexport default ActiveLines;","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveLines.js"],"names":["React","useEffect","useState","useContext","GamesContext","RenderLines","ActiveLinesContext","createContext","moment","require","ActiveLines","lines","setLines","games","gameInfo","console","log","formatDate","seconds","gmtDate","Date","myTimeZone","myDateTimeFormat","formattedDateTime","tz","format","split","formattedDate","formattedTime","gameData","gameInfoArray","i","length","commence_time","push","key","home_team","league","sport_nice","awayTeam","teams","homeTeam","awayMoneyLine","sites","odds","h2h","homeMoneyLine","lastUpdated","last_update","siteRetrieved","site_key","gameDate","gameTimeEst"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { GamesContext } from './ActiveGames';\nimport RenderLines from './RenderLines';\nexport const ActiveLinesContext = React.createContext();\nconst moment = require('moment-timezone');\n\nconst ActiveLines = () => {\n  const [lines, setLines] = useState([]);\n  const games = useContext(GamesContext);\n  \n  useEffect(() => {\n    setLines(gameInfo(games));\n    console.log(games);\n  }, [games]);\n\n  const formatDate = (seconds) => {\n    // const formattedDate = new Date(seconds * 1000).toISOString().substr();\n    const gmtDate = new Date(seconds * 1000);\n    const myTimeZone = 'America/Toronto';\n    const myDateTimeFormat = 'MMMM Do YYYY h:mm a z';\n    const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    const formattedDate = formattedDateTime[0];\n    const formattedTime = formattedDateTime[1];\n    // const newDate = new Date(formattedDate);\n    console.log(formattedDate);\n    return [formattedDate, formattedTime];\n  };\n\n  const gameInfo = (gameData) => {\n    const gameInfoArray = [];\n    let i;\n    console.log(gameData);\n    for (i = 0; i < gameData.length; i++) {\n      const formattedDate = formatDate(gameData[i].commence_time);\n      gameInfoArray.push({\n        key: `${ gameData[i].home_team }-${ gameData[i].commence_time }`,\n        league: gameData[i].sport_nice,\n        awayTeam: gameData[i].teams[0],\n        homeTeam: gameData[i].teams[1],\n        awayMoneyLine: gameData[i].sites[0].odds.h2h[0],\n        homeMoneyLine: gameData[i].sites[0].odds.h2h[1],\n        lastUpdated: gameData[i].sites[0].last_update,\n        siteRetrieved: gameData[i].sites[0].site_key,\n        // gameTimeGmt: gameData[i].commence_time\n        gameDate: formattedDate[0],\n        gameTimeEst: formattedDate[1]\n      });\n    };\n    console.log(gameInfoArray);\n    return gameInfoArray;\n  };\n\n  return (\n    // <div>\n    //   {lines.map(line => <div key={line.key}>{line.awayTeam} ({line.awayMoneyLine.toString().charAt(0)==='-' ? line.awayMoneyLine : `+${ line.awayMoneyLine }`}) VS. {line.homeTeam} ({line.homeMoneyLine.toString().charAt(0)==='-' ? line.homeMoneyLine : `+${ line.homeMoneyLine }`})</div>)}\n    // </div>\n    <div>\n      <ActiveLinesContext.Provider value={lines}>\n        <RenderLines />\n      </ActiveLinesContext.Provider>\n    </div>\n  );\n};\n\nexport default ActiveLines;\n"]},"metadata":{},"sourceType":"module"}