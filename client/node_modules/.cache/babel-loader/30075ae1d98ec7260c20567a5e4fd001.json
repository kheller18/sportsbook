{"ast":null,"code":"import _slicedToArray from\"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect,useState,useContext}from'react';import{GamesContext}from'./ActiveGames';import RenderLines from'./RenderLines';export var ActiveLinesContext=/*#__PURE__*/React.createContext();var moment=require('moment-timezone');var ActiveLines=function ActiveLines(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),lines=_useState2[0],setLines=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var games=useContext(GamesContext);useEffect(function(){setLines(gameInfo(games));setIsLoading(false);},[]);var formatDate=function formatDate(seconds){var gmtDate=new Date(seconds*1000);var myTimeZone='America/Toronto';var myDateTimeFormat='MM/D YYYY h:mm a z';var formattedDateTime=moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');var formattedDate=formattedDateTime[0];var formattedTime=formattedDateTime[1];return[formattedDate,formattedTime];};var gameInfo=function gameInfo(gameData){var gameInfoArray=[];for(var i=0;i<gameData.moneyline.length;i++){var formattedDate=formatDate(gameData.moneyline[i].commence_time);var moneyLineData=gameData.moneyline[i];var spreadData=gameData.spread[i];var totalsData=gameData.total[i];if(!moneyLineData.sites[0]||!spreadData.sites[0]||!totalsData.sites[0]){}else{gameInfoArray.push({key:\"\".concat(gameData.moneyline[i].home_team,\"-\").concat(gameData.moneyline[i].commence_time),league:gameData.moneyline[i].sport_nice,awayTeam:gameData.moneyline[i].teams[0],homeTeam:gameData.moneyline[i].teams[1],awayMoneyLine:gameData.moneyline[i].sites[0].odds.h2h[0],homeMoneyLine:gameData.moneyline[i].sites[0].odds.h2h[1],awaySpread:gameData.spread[i].sites[0].odds.spreads.points[0],homeSpread:gameData.spread[i].sites[0].odds.spreads.points[1],awaySpreadOdds:gameData.spread[i].sites[0].odds.spreads.odds[0],homeSpreadOdds:gameData.spread[i].sites[0].odds.spreads.odds[1],overUnder:gameData.total[i].sites[0].odds.totals.points[0],overOdds:gameData.total[i].sites[0].odds.totals.odds[0],underOdds:gameData.total[i].sites[0].odds.totals.odds[1],lastUpdated:gameData.moneyline[i].sites[0].last_update,siteRetrieved:gameData.moneyline[i].sites[0].site_key,gameDate:formattedDate[0],gameTimeEst:formattedDate[1]});}};return gameInfoArray;};return/*#__PURE__*/_jsx(\"div\",{children:isLoading?'':/*#__PURE__*/_jsx(ActiveLinesContext.Provider,{value:lines,children:/*#__PURE__*/_jsx(RenderLines,{})})});};export default ActiveLines;","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveLines.js"],"names":["React","useEffect","useState","useContext","GamesContext","RenderLines","ActiveLinesContext","createContext","moment","require","ActiveLines","lines","setLines","isLoading","setIsLoading","games","gameInfo","formatDate","seconds","gmtDate","Date","myTimeZone","myDateTimeFormat","formattedDateTime","tz","format","split","formattedDate","formattedTime","gameData","gameInfoArray","i","moneyline","length","commence_time","moneyLineData","spreadData","spread","totalsData","total","sites","push","key","home_team","league","sport_nice","awayTeam","teams","homeTeam","awayMoneyLine","odds","h2h","homeMoneyLine","awaySpread","spreads","points","homeSpread","awaySpreadOdds","homeSpreadOdds","overUnder","totals","overOdds","underOdds","lastUpdated","last_update","siteRetrieved","site_key","gameDate","gameTimeEst"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { GamesContext } from './ActiveGames';\nimport RenderLines from './RenderLines';\nexport const ActiveLinesContext = React.createContext();\nconst moment = require('moment-timezone');\n\nconst ActiveLines = () => {\n  const [lines, setLines] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const games = useContext(GamesContext);\n  \n  useEffect(() => {\n    setLines(gameInfo(games));\n    setIsLoading(false);\n  }, []);\n\n  const formatDate = (seconds) => {\n    const gmtDate = new Date(seconds * 1000);\n    const myTimeZone = 'America/Toronto';\n    const myDateTimeFormat = 'MM/D YYYY h:mm a z';\n    const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    const formattedDate = formattedDateTime[0];\n    const formattedTime = formattedDateTime[1];\n    return [formattedDate, formattedTime];\n  };\n\n  const gameInfo = (gameData) => {\n    const gameInfoArray = [];\n\n    for (let i = 0; i < gameData.moneyline.length; i++) {\n      const formattedDate = formatDate(gameData.moneyline[i].commence_time);\n      const moneyLineData = gameData.moneyline[i];\n      const spreadData = gameData.spread[i];\n      const totalsData = gameData.total[i];\n      \n      if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {\n      } else {\n        gameInfoArray.push({\n          key: `${ gameData.moneyline[i].home_team }-${ gameData.moneyline[i].commence_time }`,\n          league: gameData.moneyline[i].sport_nice,\n          awayTeam: gameData.moneyline[i].teams[0],\n          homeTeam: gameData.moneyline[i].teams[1],\n          awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n          homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n          awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n          homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n          awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n          homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n          overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n          overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n          underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n          lastUpdated: gameData.moneyline[i].sites[0].last_update,\n          siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n          gameDate: formattedDate[0],\n          gameTimeEst: formattedDate[1]\n        });  \n      }\n    };\n    return gameInfoArray;\n  };\n\n  return (\n    <div>\n      {isLoading ? '' : \n        <ActiveLinesContext.Provider value={lines}>\n          <RenderLines />\n        </ActiveLinesContext.Provider>\n      }\n    </div>\n  );\n};\n\nexport default ActiveLines;\n"]},"metadata":{},"sourceType":"module"}