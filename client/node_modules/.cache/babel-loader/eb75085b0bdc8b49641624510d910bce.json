{"ast":null,"code":"import _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveLines.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { GamesContext } from './ActiveGames';\nimport RenderLines from './RenderLines';\nexport var ActiveLinesContext = /*#__PURE__*/React.createContext();\n\nvar moment = require('moment-timezone');\n\nvar ActiveLines = function ActiveLines() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      lines = _useState2[0],\n      setLines = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var games = useContext(GamesContext);\n  useEffect(function () {\n    setLines(gameInfo(games));\n    setIsLoading(false);\n  }, [games]); // function to format the data\n\n  var formatDate = function formatDate(seconds) {\n    var gmtDate = new Date(seconds * 1000);\n    var myTimeZone = 'America/Toronto';\n    var myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n    var formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    var formattedDate = formattedDateTime[0];\n    var formattedTime = formattedDateTime[1];\n    return [formattedDate, formattedTime];\n  };\n\n  var gameInfo = function gameInfo(gameData) {\n    var gameInfoArray = []; // function to push all lines data to an array\n\n    for (var i = 0; i < gameData.moneyline.length; i++) {\n      var formattedDate = formatDate(gameData.moneyline[i].commence_time);\n      var moneyLineData = gameData.moneyline[i];\n      var spreadData = gameData.spread[i];\n      var totalsData = gameData.total[i];\n\n      if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {} else {\n        gameInfoArray.push({\n          key: \"\".concat(gameData.moneyline[i].home_team, \"-\").concat(gameData.moneyline[i].commence_time),\n          league: gameData.moneyline[i].sport_nice,\n          awayTeam: gameData.moneyline[i].teams[0],\n          homeTeam: gameData.moneyline[i].teams[1],\n          awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n          homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n          awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n          homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n          awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n          homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n          overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n          overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n          underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n          lastUpdated: gameData.moneyline[i].sites[0].last_update,\n          siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n          gameDate: formattedDate[0],\n          gameTimeEst: formattedDate[1]\n        });\n      }\n    }\n\n    ;\n    return gameInfoArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: isLoading ? '' : /*#__PURE__*/_jsxDEV(ActiveLinesContext.Provider, {\n      value: lines,\n      children: /*#__PURE__*/_jsxDEV(RenderLines, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ActiveLines, \"r/0f4+HiRpZCs3Qv6yxPYwUxzlk=\");\n\n_c = ActiveLines;\nexport default ActiveLines;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveLines\");","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveLines.js"],"names":["React","useEffect","useState","useContext","GamesContext","RenderLines","ActiveLinesContext","createContext","moment","require","ActiveLines","lines","setLines","isLoading","setIsLoading","games","gameInfo","formatDate","seconds","gmtDate","Date","myTimeZone","myDateTimeFormat","formattedDateTime","tz","format","split","formattedDate","formattedTime","gameData","gameInfoArray","i","moneyline","length","commence_time","moneyLineData","spreadData","spread","totalsData","total","sites","push","key","home_team","league","sport_nice","awayTeam","teams","homeTeam","awayMoneyLine","odds","h2h","homeMoneyLine","awaySpread","spreads","points","homeSpread","awaySpreadOdds","homeSpreadOdds","overUnder","totals","overOdds","underOdds","lastUpdated","last_update","siteRetrieved","site_key","gameDate","gameTimeEst"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { GamesContext } from './ActiveGames';\nimport RenderLines from './RenderLines';\nexport const ActiveLinesContext = React.createContext();\nconst moment = require('moment-timezone');\n\nconst ActiveLines = () => {\n  const [lines, setLines] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const games = useContext(GamesContext);\n\n  useEffect(() => {\n    setLines(gameInfo(games));\n    setIsLoading(false);\n  }, [games]);\n\n  // function to format the data\n  const formatDate = (seconds) => {\n    const gmtDate = new Date(seconds * 1000);\n    const myTimeZone = 'America/Toronto';\n    const myDateTimeFormat = 'MM/DD YYYY h:mm a z';\n    const formattedDateTime = moment(gmtDate).tz(myTimeZone).format(myDateTimeFormat).split('2020 ');\n    const formattedDate = formattedDateTime[0];\n    const formattedTime = formattedDateTime[1];\n    return [formattedDate, formattedTime];\n  };\n\n  const gameInfo = (gameData) => {\n    const gameInfoArray = [];\n\n    // function to push all lines data to an array\n    for (let i = 0; i < gameData.moneyline.length; i++) {\n      const formattedDate = formatDate(gameData.moneyline[i].commence_time);\n      const moneyLineData = gameData.moneyline[i];\n      const spreadData = gameData.spread[i];\n      const totalsData = gameData.total[i];\n\n      if (!moneyLineData.sites[0] || !spreadData.sites[0] || !totalsData.sites[0]) {\n      } else {\n        gameInfoArray.push({\n          key: `${ gameData.moneyline[i].home_team }-${ gameData.moneyline[i].commence_time }`,\n          league: gameData.moneyline[i].sport_nice,\n          awayTeam: gameData.moneyline[i].teams[0],\n          homeTeam: gameData.moneyline[i].teams[1],\n          awayMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[0],\n          homeMoneyLine: gameData.moneyline[i].sites[0].odds.h2h[1],\n          awaySpread: gameData.spread[i].sites[0].odds.spreads.points[0],\n          homeSpread: gameData.spread[i].sites[0].odds.spreads.points[1],\n          awaySpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[0],\n          homeSpreadOdds: gameData.spread[i].sites[0].odds.spreads.odds[1],\n          overUnder: gameData.total[i].sites[0].odds.totals.points[0],\n          overOdds: gameData.total[i].sites[0].odds.totals.odds[0],\n          underOdds: gameData.total[i].sites[0].odds.totals.odds[1],\n          lastUpdated: gameData.moneyline[i].sites[0].last_update,\n          siteRetrieved: gameData.moneyline[i].sites[0].site_key,\n          gameDate: formattedDate[0],\n          gameTimeEst: formattedDate[1]\n        });\n      }\n    };\n    return gameInfoArray;\n  };\n\n  return (\n    <div className='test'>\n      {isLoading ? '' :\n        <ActiveLinesContext.Provider value={lines}>\n          <RenderLines />\n        </ActiveLinesContext.Provider>\n      }\n    </div>\n  );\n};\n\nexport default ActiveLines;\n"]},"metadata":{},"sourceType":"module"}