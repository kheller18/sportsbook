{"ast":null,"code":"import _toConsumableArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _readOnlyError from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/RenderBetSlips.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import '../styles/BetSlip.css';\n\nimport API from '../utils/API';\nimport BetSlip from './BetSlip';\nimport Button from './Button';\nimport BetSlipConfirm from './BetSlipConfirm';\n\nvar RenderBetSlips = function RenderBetSlips(props) {\n  _s();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      toLose = _useState2[0],\n      setToLose = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toWin = _useState4[0],\n      setToWin = _useState4[1]; // const [totalToLose, setTotalToLose] = useState(0)\n\n\n  console.log(props); // let newSlips = props.data;\n  // console.log(newSlips)\n\n  var slipSend = [];\n  var totalToWin = 0;\n  var totalToLose = 0.00;\n\n  var _useState5 = useState(props.data),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newSlips = _useState6[0],\n      setNewSlips = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      submitSlips = _useState8[0],\n      setSubmitSlips = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      slipList = _useState10[0],\n      setSlipList = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      submittedSlips = _useState12[0],\n      setSubmittedSlips = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isSubmitted = _useState14[0],\n      setIsSubmitted = _useState14[1];\n\n  var send = true;\n\n  var handleDelete = function handleDelete(e) {\n    console.log(e);\n    console.log(e.target.id);\n    console.log(slipList);\n    var newList = slipList.filter(function (slip, id) {\n      return id != e.target.id;\n    });\n    console.log(newList);\n    setSlipList(newList);\n    newSlips = (_readOnlyError(\"newSlips\"), {});\n  };\n\n  var handleClear = function handleClear() {\n    newSlips = (_readOnlyError(\"newSlips\"), {});\n    setSlipList([]);\n  };\n\n  var updateSlip = function updateSlip(id, attributes) {\n    var index = slipList.findIndex(function (x) {\n      return x.id == id;\n    });\n    var updateList = slipList.slice();\n    console.log(index);\n\n    if (index == -1) {} else {// setSlipList([...])\n    }\n  };\n\n  var updatePage = function updatePage() {// setIsSubmitted(true)\n    // // props.onSubmit(slipList);\n    // console.log()\n    // props.passSlipState('submitted')\n    // props.passSlipData(slipSend)\n    // setSlipList([])\n    // setTimout((), 5000)\n  };\n\n  var handleChange = function handleChange(e, data) {\n    console.log(data);\n    console.log(e);\n    console.log(data.odds.toString()[0]);\n\n    switch (data.odds.toString()[0]) {\n      case '-':\n        console.log(data.odds);\n        var tempCalc = Math.abs(e.target.value * data.odds * .01);\n        console.log(tempCalc);\n        var finalCalc = tempCalc - e.target.value;\n        setToLose(e.target.value);\n        console.log(e.target.value);\n        data.toLose = e.target.value;\n        console.log((e.target.value - finalCalc).toFixed(2));\n        setToWin((e.target.value - finalCalc).toFixed(2));\n        data.toWin = (e.target.value - finalCalc).toFixed(2); // let totalToLose = 0;\n        // slipList.map(slip => {\n        //   totalToLose = parseFloat(totalToLose + slip.slipData.toLose);\n        //   console.log(totalToLose)\n        // })\n\n        console.log(data); // return data;\n\n        var index = slipList.findIndex(function (x) {\n          return console.log(x);\n        });\n\n        if (slipList.length === 1) {\n          slipList.map(function (slip) {\n            console.log(slip);\n          });\n        } else {}\n\n        var slice = slipList.slice(0, parseInt(e.target.id));\n        console.log(slice);\n        console.log(slipList); // console.log('slice', slice)\n\n        break;\n\n      default:\n        setToLose(e.target.value);\n        data.toLose = e.target.value;\n        console.log((e.target.value * data.odds * .01).toFixed(2));\n        setToWin((e.target.value * data.odds * .01).toFixed(2));\n        data.toWin = (e.target.value * data.odds * .01).toFixed(2);\n        console.log(slipList);\n        break;\n    }\n\n    ;\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    event.persist();\n    console.log(slipList);\n    var userData = JSON.parse(localStorage.getItem('user')); // function to post slip data based on slip type\n\n    var slipData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                slipList.map(function (slip) {\n                  console.log(slip);\n                  console.log(slip.slipData.toLose);\n\n                  if (slip.slipData.toLose === '' || slip.slipData.toLose < 5) {\n                    console.log('nope');\n                    send = false;\n                  } else {\n                    slipSend.push({\n                      userId: userData._id,\n                      gameKey: slip.data.key,\n                      betType: slip.slipData.type,\n                      team: slip.slipData.team,\n                      line: slip.slipData.line,\n                      odds: slip.slipData.odds,\n                      toLose: slip.slipData.toLose,\n                      toWin: slip.slipData.toWin,\n                      status: slip.slipData.status,\n                      outcome: slip.slipData.outcome,\n                      payout: slip.slipData.payout\n                    });\n                  }\n                });\n\n                if (!(send === true)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return API.submitBetSlip(slipSend).then(function (res) {\n                  console.log(res);\n\n                  if (res.status === 200) {\n                    console.log('200'); // setIsSubmitted(true);\n                    // updatePage();\n\n                    setIsSubmitted(true); // props.onSubmit(slipList);\n\n                    var tempSlipList = slipList; // props.data=[];\n\n                    setSlipList([]);\n                    console.log(slipList);\n                    props.passSlipData(tempSlipList);\n                    props.passSlipState('submitted'); // return (\n                    //   <div>\n                    //     <BetSlipConfirm data={res.data} />\n                    //   </div>\n                    // )\n                  }\n                }).catch(function (err) {\n                  console.log(err);\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function slipData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    slipData();\n  };\n\n  useEffect(function () {\n    // setSlips(slips);\n    // const slips = props.data;\n    // const [slipList, setSlipList] = useState();\n    // console.log('mounted')\n    // console.log(newSlips)\n    if (newSlips === undefined || newSlips === {} || newSlips === null || newSlips === []) {} else {\n      setSlipList(function (slipList) {\n        return [].concat(_toConsumableArray(slipList), [newSlips]);\n      }); // console.log(\"added\")\n      // console.log(slipList)\n    } // console.log(slipList)\n    // setSlips(slips)\n\n  }, [newSlips]);\n  console.log(slipList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slip\",\n    children: [slipList.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-slip-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"empty-slip-image\",\n          className: \"fa fa-shopping-cart\",\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, _this) : '', slipList !== undefined && slipList.length !== 0 ? // (slipList === undefined || slipList.length === 0) ? '' :\n    slipList.map(function (slip, i) {\n      // if (slip.slipData.toLose <= 0) {\n      //   totalToLose = parseFloat(totalToLose)\n      // } else {\n      //   totalToLose += parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n      // }\n      totalToLose = parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(BetSlip, {\n          data: slip,\n          id: i,\n          onRemove: handleDelete,\n          onSubmit: handleSubmit,\n          onChange: handleChange,\n          onUpdate: updateSlip,\n          toWin: toWin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }, _this)\n      }, slip.data.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }, _this);\n    }) : '', slipList === undefined || slipList.length === 0 || slipList === [] ? '' : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slip-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClear,\n        id: props.id,\n        type: \"button\",\n        className: \"slip-button\",\n        children: \"CANCEL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        className: \"slip-button\",\n        id: \"submit-slip\",\n        children: \"PLACE BET(S)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RenderBetSlips, \"lYbyQsiLifuJ26rCnNLy7COAprE=\");\n\n_c = RenderBetSlips;\nexport default RenderBetSlips; // take the value from the slip, set it to the array here, then re render the whole page using useffect dependency\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderBetSlips\");","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/RenderBetSlips.js"],"names":["React","useEffect","useState","API","BetSlip","Button","BetSlipConfirm","RenderBetSlips","props","toLose","setToLose","toWin","setToWin","console","log","slipSend","totalToWin","totalToLose","data","newSlips","setNewSlips","submitSlips","setSubmitSlips","slipList","setSlipList","submittedSlips","setSubmittedSlips","isSubmitted","setIsSubmitted","send","handleDelete","e","target","id","newList","filter","slip","handleClear","updateSlip","attributes","index","findIndex","x","updateList","slice","updatePage","handleChange","odds","toString","tempCalc","Math","abs","value","finalCalc","toFixed","length","map","parseInt","handleSubmit","event","preventDefault","persist","userData","JSON","parse","localStorage","getItem","slipData","push","userId","_id","gameKey","key","betType","type","team","line","status","outcome","payout","submitBetSlip","then","res","tempSlipList","passSlipData","passSlipState","catch","err","undefined","i","parseFloat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import '../styles/BetSlip.css';\nimport API from '../utils/API';\nimport BetSlip from './BetSlip';\nimport Button from './Button';\nimport BetSlipConfirm from './BetSlipConfirm'\n\nconst RenderBetSlips = (props) => {\n  const [toLose, setToLose] = useState(0);\n  const [toWin, setToWin] = useState();\n  // const [totalToLose, setTotalToLose] = useState(0)\n  console.log(props)\n  // let newSlips = props.data;\n  // console.log(newSlips)\n  const slipSend = [];\n  let totalToWin = 0;\n  let totalToLose = 0.00;\n  const [newSlips, setNewSlips] = useState(props.data)\n  const [submitSlips, setSubmitSlips] = useState([]);\n  const [slipList, setSlipList] = useState();\n  const [submittedSlips, setSubmittedSlips] = useState([])\n  const [isSubmitted, setIsSubmitted] = useState(false)\n  let send = true;\n\n  const handleDelete = (e) => {\n    console.log(e);\n    console.log(e.target.id)\n    console.log(slipList)\n    let newList = slipList.filter((slip, id) => id != e.target.id);\n    console.log(newList)\n    setSlipList(newList);\n    newSlips = {};\n  }\n\n  const handleClear = () => {\n    newSlips = {};\n    setSlipList([]);\n\n  }\n\n  const updateSlip = (id, attributes) => {\n    let index = slipList.findIndex(x => x.id == id);\n    let updateList = slipList.slice()\n    console.log(index);\n    if (index == -1) {\n\n    } else {\n      // setSlipList([...])\n    }\n  }\n\n  const updatePage = () => {\n    // setIsSubmitted(true)\n    // // props.onSubmit(slipList);\n    // console.log()\n    // props.passSlipState('submitted')\n    // props.passSlipData(slipSend)\n    // setSlipList([])\n\n    // setTimout((), 5000)\n  }\n\n  const handleChange = (e, data) => {\n    console.log(data);\n    console.log(e);\n    console.log(data.odds.toString()[0]);\n    switch (data.odds.toString()[0]) {\n      case '-':\n        console.log(data.odds)\n        let tempCalc = Math.abs(e.target.value * data.odds * .01);\n        console.log(tempCalc)\n        let finalCalc = tempCalc - e.target.value;\n        setToLose(e.target.value)\n        console.log(e.target.value)\n        data.toLose = e.target.value;\n        console.log((e.target.value - finalCalc).toFixed(2))\n        setToWin((e.target.value - finalCalc).toFixed(2));\n        data.toWin=(e.target.value - finalCalc).toFixed(2);\n        // let totalToLose = 0;\n        // slipList.map(slip => {\n        //   totalToLose = parseFloat(totalToLose + slip.slipData.toLose);\n        //   console.log(totalToLose)\n        // })\n        console.log(data);\n\n        // return data;\n        let index = slipList.findIndex(x => console.log(x));\n        if (slipList.length === 1) {\n          slipList.map(slip => {\n            console.log(slip)\n          })\n        } else {\n\n        }\n        let slice = slipList.slice(0, parseInt(e.target.id));\n        console.log(slice);\n        console.log(slipList)\n        // console.log('slice', slice)\n        break;\n      default:\n        setToLose(e.target.value);\n        data.toLose = e.target.value;\n        console.log((e.target.value * data.odds * .01).toFixed(2))\n        setToWin((e.target.value * data.odds * .01).toFixed(2));\n        data.toWin = (e.target.value * data.odds * .01).toFixed(2)\n        console.log(slipList)\n        break;\n    };\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    event.persist();\n    console.log(slipList);\n    const userData = JSON.parse(localStorage.getItem('user'));\n\n    // function to post slip data based on slip type\n    const slipData = async () => {\n\n      slipList.map(slip => {\n        console.log(slip)\n        console.log(slip.slipData.toLose)\n        if (slip.slipData.toLose === '' || slip.slipData.toLose < 5) {\n\n          console.log('nope')\n          send = false;\n\n        } else {\n          slipSend.push({\n            userId: userData._id,\n            gameKey: slip.data.key,\n            betType: slip.slipData.type,\n            team: slip.slipData.team,\n            line: slip.slipData.line,\n            odds: slip.slipData.odds,\n            toLose: slip.slipData.toLose,\n            toWin: slip.slipData.toWin,\n            status: slip.slipData.status,\n            outcome: slip.slipData.outcome,\n            payout: slip.slipData.payout\n          })\n        }\n      })\n\n      if (send === true) {\n        await API.submitBetSlip(slipSend)\n          .then((res) => {\n            console.log(res);\n            if (res.status === 200) {\n              console.log('200')\n              // setIsSubmitted(true);\n              // updatePage();\n              setIsSubmitted(true)\n              // props.onSubmit(slipList);\n              let tempSlipList = slipList;\n              // props.data=[];\n              setSlipList([])\n              console.log(slipList)\n              props.passSlipData(tempSlipList)\n              props.passSlipState('submitted')\n              // return (\n              //   <div>\n              //     <BetSlipConfirm data={res.data} />\n              //   </div>\n              // )\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          });\n      }\n\n\n\n    };\n\n    slipData();\n  };\n\n  useEffect(() => {\n    // setSlips(slips);\n    // const slips = props.data;\n    // const [slipList, setSlipList] = useState();\n    // console.log('mounted')\n    // console.log(newSlips)\n    if (newSlips === undefined || newSlips === {} || newSlips === null || newSlips===[]) {\n\n    } else {\n      setSlipList(slipList => [...slipList, newSlips])\n      // console.log(\"added\")\n      // console.log(slipList)\n    }\n    // console.log(slipList)\n    // setSlips(slips)\n\n  }, [newSlips]);\n\n  console.log(slipList)\n  return (\n    <div className='slip'>\n      \n      {/* {(isSubmitted !== true && slipList !== undefined && slipList.length !== 0) ? */}\n      {slipList.length === 0 ? \n        <div className='empty-slip-container'>\n          <span><i id='empty-slip-image' className='fa fa-shopping-cart' aria-hidden=\"true\"></i></span>\n        </div>\n      :\n      ''}\n\n      {(slipList !== undefined && slipList.length !== 0) ?\n        // (slipList === undefined || slipList.length === 0) ? '' :\n          slipList.map((slip, i) => {\n            // if (slip.slipData.toLose <= 0) {\n            //   totalToLose = parseFloat(totalToLose)\n            // } else {\n            //   totalToLose += parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n            // }\n            totalToLose = parseFloat(totalToLose + slip.slipData.toLose).toFixed(2);\n            return (\n              <div key={slip.data.key}>\n                <BetSlip data={slip} id={i} onRemove={handleDelete} onSubmit={handleSubmit} onChange={handleChange} onUpdate={updateSlip} toWin={toWin}/>\n              </div>\n            )\n          })\n        :\n        ''\n      }\n\n      {/* {(slipList === undefined || slipList.length === 0 || slipList === []) ? '' :\n          <div className='slip-total-money'>\n            {totalToLose}\n          </div>\n      } */}\n\n      {(slipList === undefined || slipList.length === 0 || slipList === []) ? '' :\n        <div className='slip-buttons'>\n          <Button\n            onClick={handleClear}\n            id={props.id}\n            type='button'\n            className='slip-button'\n          >\n            CANCEL\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            className='slip-button'\n            id='submit-slip'\n          >\n            PLACE BET(S)\n          </Button>\n        </div>\n      }\n    </div>\n  )\n};\n\nexport default RenderBetSlips;\n\n// take the value from the slip, set it to the array here, then re render the whole page using useffect dependency"]},"metadata":{},"sourceType":"module"}