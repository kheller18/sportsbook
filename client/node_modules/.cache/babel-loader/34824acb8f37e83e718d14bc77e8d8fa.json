{"ast":null,"code":"import _objectSpread from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _readOnlyError from \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveGames.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport API from '../utils/API';\nimport ActiveLines from './ActiveLines';\nimport { SportsContext } from './ActiveSports';\nexport var GamesContext = React.createContext();\n\nfunction ActiveGames() {\n  // const sports = useContext(SportsContext);\n  // const sports = useContext(SportsContext);\n  var moneyLineArr, spreadArr; // console.log(sports)\n\n  var _useState = useState({\n    moneyline: null,\n    spread: null,\n    total: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      games = _useState2[0],\n      setGames = _useState2[1]; // const [spreads, setSpreads] = useState({ spreadd: null });\n\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var sports = useContext(SportsContext); // console.log(games.isLoading)\n\n  useEffect(function () {\n    var getMoneyLineData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return API.getLines(sports[1], 'moneyline');\n\n              case 2:\n                response = _context.sent;\n                console.log(response);\n                return _context.abrupt(\"return\", response.data.data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getMoneyLineData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var getSpreadData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return API.getLines(sports[1], 'spread');\n\n              case 2:\n                response = _context2.sent;\n                console.log(response);\n                return _context2.abrupt(\"return\", response.data.data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getSpreadData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    var getTotalsData = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.getLines(sports[1], 'totals');\n\n              case 2:\n                response = _context3.sent;\n                console.log(response);\n                return _context3.abrupt(\"return\", response.data.data);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function getTotalsData() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    Promise.all([getMoneyLineData(), getSpreadData(), getTotalsData()]).then(function (values) {\n      setGames(_objectSpread({}, games, {\n        moneyline: values[0],\n        spread: values[1],\n        total: values[3]\n      }));\n      setIsLoading(isLoading = (_readOnlyError(\"isLoading\"), false));\n    }).catch(function (err) {\n      console.log(err);\n      setIsLoading(_objectSpread({}, isLoading, {\n        isLoading: false\n      }));\n    }); // const getMLData = async () => {\n    //   const response = await API.getLines(sports[1], 'moneyline');\n    //   console.log(response)\n    //   return response;\n    // };\n    // const getSpreadData = async () => {\n    //   const response = await API.getLines(sports[1], 'spread');\n    //   console.log(response)\n    //   return response;\n    // };\n    // async function getMLData() {\n    //   const response = await API.getLines(sports[1], 'moneyline');\n    //   console.log(response)\n    //   return response;\n    // };\n    // function getSpreadData() {\n    //   const response = await API.getLines(sports[1], 'spread');\n    //   console.log(response)\n    //   return response;\n    // };\n  }, []); // const fetchData = async () => {\n  //   console.log(sports);\n  //   await (API.getLines(sports[1], 'moneyline'))\n  //     .then(res => setGames({\n  //       ...games,\n  //       moneyline: res.data\n  //     }))\n  //     .catch(err => {\n  //       console.log(err)\n  //     });\n  //   await API.getLines(sports[1], 'spread')\n  //     // console.log('in')\n  //     .then(res => setSpreads({\n  //       ...spreads,\n  //       spreadd: res.data\n  //     }),\n  //       setIsLoading(false)\n  //     )\n  //     .catch(err => {\n  //         console.log(err)\n  //     });\n  // };\n  // fetchData();\n  // async function getMoneyLine() {\n  //   await API.getLines(sports[1], 'moneyline')\n  //     .then(res => {\n  //       setGames(prevGames => [\n  //         ...prevGames,\n  //         {\n  //           moneyline: res.data.data\n  //         }\n  //       ]);\n  //     })\n  //     .catch(err => {\n  //       console.log(err)\n  //     });\n  // };\n  // async function getSpreadLine() {\n  //   await API.getLines(sports[1], 'spread')\n  //     .then(res => {\n  //       setGames(prevGames => [\n  //         ...prevGames, \n  //         {\n  //           spread: res.data.data\n  //         }\n  //       ])\n  //       console.log(games);\n  //     })\n  //     .catch(err => {\n  //       console.log(err)\n  //     });\n  // };\n  // async function getTotalsLine() {\n  //   await API.getLines(sports[1], 'totals')\n  //     .then(res => {\n  //       setGames(prevGames => [\n  //         ...prevGames,\n  //         {\n  //           totals: res.data.data  \n  //         }\n  //       ])\n  //       console.log(games);\n  //     })\n  //     .catch(err => {\n  //       console.log(err)\n  //     });\n  // };\n  //   fetchData();\n  // }, []);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, isLoading ? '' : /*#__PURE__*/React.createElement(GamesContext.Provider, {\n    value: games,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ActiveLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })));\n  {\n    /* [{games}] */\n  }\n  {\n    /* {games.map(game => <div key={game.home_team}>{game.teams[0]} vs. {game.teams[1]}</div>)} */\n  }\n  {\n    /* <GamesContext.Provider value={{games}}>\n     <ActiveLines />\n    </GamesContext.Provider> */\n  }\n}\n\n;\nexport default ActiveGames;","map":{"version":3,"sources":["/Users/keenanheller/Desktop/bootcamp-homeworks/sportsbook/client/src/components/ActiveGames.js"],"names":["React","useEffect","useState","useContext","API","ActiveLines","SportsContext","GamesContext","createContext","ActiveGames","moneyLineArr","spreadArr","moneyline","spread","total","games","setGames","isLoading","setIsLoading","sports","getMoneyLineData","getLines","response","console","log","data","getSpreadData","getTotalsData","Promise","all","then","values","catch","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport API from '../utils/API';\nimport ActiveLines from './ActiveLines';\nimport { SportsContext } from './ActiveSports';\nexport const GamesContext = React.createContext();\n\nfunction ActiveGames() {\n  // const sports = useContext(SportsContext);\n  // const sports = useContext(SportsContext);\n  let moneyLineArr, spreadArr;\n\n  // console.log(sports)\n  const [games, setGames] = useState({ moneyline: null, spread: null, total: null });\n  // const [spreads, setSpreads] = useState({ spreadd: null });\n  const [isLoading, setIsLoading] = useState(true);\n  const sports = useContext(SportsContext);\n  // console.log(games.isLoading)\n\n  useEffect(() => {\n    const getMoneyLineData = async () => {\n      const response = await API.getLines(sports[1], 'moneyline');\n      console.log(response)\n      return response.data.data;\n    };\n\n    const getSpreadData = async () => {\n      const response = await API.getLines(sports[1], 'spread');\n      console.log(response)\n      return response.data.data;\n    };\n\n    const getTotalsData = async () => {\n      const response = await API.getLines(sports[1], 'totals');\n      console.log(response)\n      return response.data.data;\n    };\n\n\n\n\n    Promise.all([getMoneyLineData(), getSpreadData(), getTotalsData()])\n      .then(values => {\n        setGames({\n          ...games,\n          moneyline: values[0],\n          spread: values[1],\n          total: values[3],\n        })\n        setIsLoading(\n          isLoading = false\n        )\n      })\n      .catch(err => {\n        console.log(err);\n        setIsLoading({\n          ...isLoading,\n          isLoading: false\n        });\n      });\n    \n    // const getMLData = async () => {\n    //   const response = await API.getLines(sports[1], 'moneyline');\n    //   console.log(response)\n    //   return response;\n    // };\n\n    // const getSpreadData = async () => {\n    //   const response = await API.getLines(sports[1], 'spread');\n    //   console.log(response)\n    //   return response;\n    // };\n\n\n    // async function getMLData() {\n    //   const response = await API.getLines(sports[1], 'moneyline');\n    //   console.log(response)\n    //   return response;\n    // };\n\n\n    // function getSpreadData() {\n    //   const response = await API.getLines(sports[1], 'spread');\n    //   console.log(response)\n    //   return response;\n    // };\n  }, []);\n\n    \n    // const fetchData = async () => {\n    //   console.log(sports);\n    //   await (API.getLines(sports[1], 'moneyline'))\n    //     .then(res => setGames({\n    //       ...games,\n    //       moneyline: res.data\n    //     }))\n    //     .catch(err => {\n    //       console.log(err)\n    //     });\n\n    //   await API.getLines(sports[1], 'spread')\n    //     // console.log('in')\n    //     .then(res => setSpreads({\n    //       ...spreads,\n    //       spreadd: res.data\n    //     }),\n\n    //       setIsLoading(false)\n    //     )\n    //     .catch(err => {\n    //         console.log(err)\n    //     });\n\n\n    // };\n    // fetchData();\n  \n\n    // async function getMoneyLine() {\n    //   await API.getLines(sports[1], 'moneyline')\n    //     .then(res => {\n    //       setGames(prevGames => [\n    //         ...prevGames,\n    //         {\n    //           moneyline: res.data.data\n    //         }\n    //       ]);\n    //     })\n    //     .catch(err => {\n    //       console.log(err)\n    //     });\n    // };\n\n    // async function getSpreadLine() {\n    //   await API.getLines(sports[1], 'spread')\n    //     .then(res => {\n    //       setGames(prevGames => [\n    //         ...prevGames, \n    //         {\n    //           spread: res.data.data\n    //         }\n    //       ])\n    //       console.log(games);\n    //     })\n    //     .catch(err => {\n    //       console.log(err)\n    //     });\n    // };\n\n    // async function getTotalsLine() {\n    //   await API.getLines(sports[1], 'totals')\n    //     .then(res => {\n    //       setGames(prevGames => [\n    //         ...prevGames,\n    //         {\n    //           totals: res.data.data  \n    //         }\n    //       ])\n    //       console.log(games);\n    //     })\n    //     .catch(err => {\n    //       console.log(err)\n    //     });\n    // };\n\n  //   fetchData();\n  // }, []);\n\n  return (\n    <div>\n      {isLoading ? '' :\n        <GamesContext.Provider value={games}>\n          <ActiveLines />\n        </GamesContext.Provider>\n      }\n    </div>\n  );\n      {/* [{games}] */}\n      {/* {games.map(game => <div key={game.home_team}>{game.teams[0]} vs. {game.teams[1]}</div>)} */}\n      {/* <GamesContext.Provider value={{games}}>\n        <ActiveLines />\n      </GamesContext.Provider> */}\n    \n  \n};\n\nexport default ActiveGames;\n"]},"metadata":{},"sourceType":"module"}